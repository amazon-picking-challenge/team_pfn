// Generated by gencpp from file apc2016/ItemPoseEstAddDataRequest.msg
// DO NOT EDIT!


#ifndef APC2016_MESSAGE_ITEMPOSEESTADDDATAREQUEST_H
#define APC2016_MESSAGE_ITEMPOSEESTADDDATAREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace apc2016
{
template <class ContainerAllocator>
struct ItemPoseEstAddDataRequest_
{
  typedef ItemPoseEstAddDataRequest_<ContainerAllocator> Type;

  ItemPoseEstAddDataRequest_()
    : item()
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)
    , is_first_data(false)  {
    }
  ItemPoseEstAddDataRequest_(const ContainerAllocator& _alloc)
    : item(_alloc)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)
    , is_first_data(false)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _item_type;
  _item_type item;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _ax_type;
  _ax_type ax;

   typedef float _ay_type;
  _ay_type ay;

   typedef float _az_type;
  _az_type az;

   typedef uint8_t _is_first_data_type;
  _is_first_data_type is_first_data;




  typedef boost::shared_ptr< ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ItemPoseEstAddDataRequest_

typedef ::apc2016::ItemPoseEstAddDataRequest_<std::allocator<void> > ItemPoseEstAddDataRequest;

typedef boost::shared_ptr< ::apc2016::ItemPoseEstAddDataRequest > ItemPoseEstAddDataRequestPtr;
typedef boost::shared_ptr< ::apc2016::ItemPoseEstAddDataRequest const> ItemPoseEstAddDataRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace apc2016

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'apc2016': ['/home/kamiya/data/apc/ros/src/apc2016/msg', '/home/kamiya/data/apc/ros/devel/share/apc2016/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "801d8cb1e99292e6a60a6f47cbd396d8";
  }

  static const char* value(const ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x801d8cb1e99292e6ULL;
  static const uint64_t static_value2 = 0xa60a6f47cbd396d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "apc2016/ItemPoseEstAddDataRequest";
  }

  static const char* value(const ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string item\n\
float32 x\n\
float32 y\n\
float32 z\n\
float32 ax\n\
float32 ay\n\
float32 az\n\
bool is_first_data\n\
";
  }

  static const char* value(const ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.item);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.ax);
      stream.next(m.ay);
      stream.next(m.az);
      stream.next(m.is_first_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ItemPoseEstAddDataRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::apc2016::ItemPoseEstAddDataRequest_<ContainerAllocator>& v)
  {
    s << indent << "item: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.item);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "ax: ";
    Printer<float>::stream(s, indent + "  ", v.ax);
    s << indent << "ay: ";
    Printer<float>::stream(s, indent + "  ", v.ay);
    s << indent << "az: ";
    Printer<float>::stream(s, indent + "  ", v.az);
    s << indent << "is_first_data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_first_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // APC2016_MESSAGE_ITEMPOSEESTADDDATAREQUEST_H
